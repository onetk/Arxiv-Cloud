{"version":3,"sources":["firebase.js","api.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","process","FIREBASE_APIKEY","authDomain","FIREBASE_AUTHDOMAIN","databaseURL","FIREBASE_DATABASEURL","projectId","FIREBASE_PROJECTID","messagingSenderId","FIREBASE_MESSAGINGSENDERID","appId","FIREBASE_APPID","githubProvider","firebase","auth","GithubAuthProvider","FirebaseFactory","initializeApp","login","signInWithPopup","logout","signOut","API_ENDPOINT","BACKEND_API_BASE","successHandler","text","lists","JSON","parse","console","log","items","i","length","push","class","title","body","tag","errorHandler","error","message","successPaperHandler","Object","keys","request","method","url","fetch","then","res","ok","status","json","Error","App","state","user","errorMessage","token","this","currentUser","getIdToken","onAuthStateChanged","setState","idToken","headers","Headers","Authorization","credentials","resp","catch","toString","tags","tagDB","join","getToken","stringify","e","key","preventDefault","target","value","params","URLSearchParams","set","props","onClick","href","placeholder","onKeyDown","handleKeyDown","bind","src","alt","getAllArticles","getAllTags","deleteArticles","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b752a1aa.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_APIKEY,\n  authDomain: process.env.FIREBASE_AUTHDOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASEURL,\n  projectId: process.env.FIREBASE_PROJECTID,\n  messagingSenderId: process.env.FIREBASE_MESSAGINGSENDERID,\n  appId: process.env.FIREBASE_APPID\n};\n\n// https://firebase.google.com/docs/auth/web/start\n// see: GitHub認証の統合 https://firebase.google.com/docs/auth/web/github-auth?hl=ja\nconst githubProvider = new firebase.auth.GithubAuthProvider();\n\nconst FirebaseFactory = () => {\n  firebase.initializeApp(firebaseConfig);\n  let auth = firebase.auth();\n  return {\n    auth() {\n      return auth;\n    },\n\n    login() {\n      return auth.signInWithPopup(githubProvider);\n    },\n\n    logout() {\n      return auth.signOut();\n    }\n  };\n};\n\nexport default FirebaseFactory();\n","const API_ENDPOINT = process.env.BACKEND_API_BASE;\n\nexport const getPrivateMessage = function(idToken) {\n  return fetch(`${API_ENDPOINT}/private`, {\n    method: \"get\",\n    headers: new Headers({\n      Authorization: `Bearer ${idToken}`\n    }),\n    credentials: \"same-origin\"\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw Error(`Request rejected with status ${res.status}`);\n    }\n  });\n};\n\nexport const getPublicMessage = function() {\n  return fetch(`${API_ENDPOINT}/public`);\n};\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n\nimport firebase from \"./firebase\";\n// import { getPrivateMessage, getPublicMessage } from \"./api\";\nimport { getPrivateMessage } from \"./api\";\n\n// const API_ENDPOINT = process.env.BACKEND_API_BASE;\n\nconst successHandler = function(text) {\n  const lists = JSON.parse(text);\n  console.log(lists);\n  const items = [];\n  for (let i = 0; i < lists.length; i++) {\n    // console.log(lists[i]);\n    items.push(\n      // <div style=\"border-bottom:solid 1px lightgray; margin: auto;  padding:10px 5px 0 0; width:250px;\">\n      //   {lists[i].id} {lists[i].title} {lists[i].body}\n      // </div>\n      <div class=\"TopStyle\">\n        <div class=\"ArticleTitle\">{lists[i].title}</div>\n        <div class=\"ArticleBody\">{lists[i].body}</div>\n        <div class=\"ArticleTag\">\n          #{lists[i].tag}hoge #{lists[i].tag}fuga #{lists[i].tag}piyo\n        </div>\n      </div>\n    );\n  }\n\n  return items;\n};\nconst errorHandler = function(error) {\n  return error.message;\n};\n\nconst successPaperHandler = function(text) {\n  const lists = JSON.parse(text);\n  console.log(lists);\n  const items = [];\n  // for (let i = 0; i < Object.keys(lists).length; i++) {\n  for (let i = 1; i < Object.keys(lists).length; i++) {\n    items.push(\n      <div class=\"TopStyle\">\n        <div class=\"ArticleTitle\">{lists[i][0]}</div>\n        <div class=\"ArticleBody\">{lists[i][2]}</div>\n        <div class=\"ArticleTag\">\n          #{lists[i][3]} #{lists[i][4]} #{lists[i][5]}\n        </div>\n      </div>\n    );\n  }\n\n  return items;\n};\n\nfunction request(method, url) {\n  return fetch(url).then(function(res) {\n    if (res.ok) {\n      if (res.status === 200 && method === \"PUT\") {\n        return \"success!!\";\n      }\n\n      try {\n        JSON.parse(res);\n        return res.json();\n      } catch (error) {\n        return res.text();\n      }\n    }\n    if (res.status < 500) {\n      throw new Error(\"4xx error\");\n    }\n    throw new Error(\"5xx error\");\n  });\n}\nclass App extends Component {\n  constructor() {\n    super();\n    this.state.user = null;\n    this.state.message = \"\";\n    this.state.errorMessage = \"\";\n    this.state.token = \"\";\n    this.state.text = \"\";\n  }\n\n  async getToken() {\n    if (this.state.token === \"\") {\n      this.state.token = await firebase.auth().currentUser.getIdToken();\n    }\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.setState({\n          user: null\n        });\n      }\n    });\n  }\n\n  getPrivateMessage() {\n    this.state.user\n      .getIdToken()\n      .then(token => {\n        return getPrivateMessage(token);\n      })\n      .then(resp => {\n        this.setState({\n          message: resp.message\n        });\n      })\n      .catch(error => {\n        this.setState({\n          errorMessage: error.toString()\n        });\n      });\n  }\n\n  getAllArticles() {\n    request(\"GET\", \"http://localhost:1991/articles\")\n      .then(resp => {\n        this.setState({\n          message: successHandler(resp)\n        });\n      })\n      .catch(error => {\n        this.setState({\n          errorMessage: errorHandler(error)\n        });\n      });\n  }\n\n  getAllTags() {\n    request(\"GET\", \"http://localhost:1991/tags\")\n      .then(resp => {\n        const tags = [];\n        var tagDB = JSON.parse(resp);\n        for (let i = 0; i < tagDB.length; i++) {\n          // console.log(tagDB[i].tag);\n          tags.push(tagDB[i].tag);\n        }\n        console.log(tags.join(\",\"));\n        // this.setState({\n        //   message: successTagHandler(resp)\n        // });\n      })\n      .catch(error => {\n        console.log(error);\n        // this.setState({\n        //   errorMessage: errorHandler(error)\n        // });\n      });\n  }\n\n  // getPapers() {\n  //   request(\"GET\", \"http://localhost:1991/articles/paper\")\n  //     .then(resp => {\n  //       this.setState({\n  //         message: successHandler(resp)\n  //       });\n  //     })\n  //     .catch(error => {\n  //       this.setState({\n  //         errorMessage: errorHandler(error)\n  //       });\n  //     });\n\n  // request(\n  //   \"GET\",\n  //   \"http://export.arxiv.org/api/query?search_query=all:\" +\n  //     \"deeplearning\" +\n  //     \"&start=0&max_results=100\"\n  // )\n  //   .then(resp => {\n  //     this.setState({\n  //       message: successPaperHandler(resp)\n  //     });\n  //   })\n  //   .catch(error => {\n  //     this.setState({\n  //       errorMessage: errorHandler(error)\n  //     });\n  //   });\n  // }\n\n  async getPapers() {\n    await this.getToken();\n\n    return fetch(`http://localhost:1991/articles/paper`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.state.token}`\n      },\n      body: JSON.stringify({ title: \"ok\", body: \"google\" })\n      // body: JSON.stringify({ keyword: \"google\" })\n    })\n      .then(resp => {\n        console.log(resp);\n        this.setState({\n          message: successPaperHandler(resp)\n        });\n      })\n      .catch(error => {\n        this.setState({\n          errorMessage: errorHandler(error)\n        });\n      });\n  }\n\n  async deleteArticles() {\n    await this.getToken();\n\n    return fetch(`http://localhost:1991/articles`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.state.token}`\n      }\n    });\n  }\n\n  async postArticles() {\n    await this.getToken();\n\n    return fetch(`http://localhost:1991/articles`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.state.token}`\n      },\n      body: JSON.stringify({ title: \"ok\", body: \"google\" })\n    });\n  }\n\n  handleKeyDown(e) {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n\n      this.setState({\n        text: e.target.value\n      });\n      console.log(this.state.text, \"ok\");\n\n      const params = new URLSearchParams();\n      params.set(\"keyword\", this.state.text);\n      // console.log(\"http://localhost:1991/paper?\" + params.toString());\n\n      request(\"GET\", \"http://localhost:1991/paper?\" + params.toString())\n        .then(resp => {\n          console.log(\"success\");\n          this.setState({\n            message: successPaperHandler(resp)\n          });\n        })\n        .catch(error => {\n          console.log(\"fail\");\n          this.setState({\n            errorMessage: errorHandler(error)\n          });\n        });\n    }\n  }\n\n  render(props, state) {\n    if (state.user === null) {\n      return <button onClick={firebase.login}>Please login</button>;\n    }\n\n    return (\n      <div>\n        <h2 class=\"title word\">\n          <a class=\"title\" href=\"/\">\n            Arxiv Cloud\n          </a>\n        </h2>\n\n        <div class=\"search-form\">\n          <textarea\n            class=\"search-text\"\n            placeholder=\"Search\"\n            // onChange={this.handleChange.bind(this)}\n            onKeyDown={this.handleKeyDown.bind(this)}\n          />\n          <img src=\"search.png\" alt=\"search icon\" class=\"search-icon\" />\n        </div>\n\n        <div class=\"state_messages\">{state.message}</div>\n        <div class=\"StateErrDiv\">\n          <p class=\"StateErrMessage\">{state.errorMessage}</p>\n          {/* <button onClick={this.getPrivateMessage.bind(this)}>\n            Get Private Message\n          </button> */}\n          <button onClick={this.getAllArticles.bind(this)}>List message</button>\n          <button onClick={this.getAllTags.bind(this)}>List Tag</button>\n          {/* <button onClick={this.postArticles.bind(this)}>Post</button> */}\n          <button onClick={this.deleteArticles.bind(this)}>Delete All</button>\n          <button onClick={firebase.logout}>Logout</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}